"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-plotly.js";
exports.ids = ["vendor-chunks/react-plotly.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-plotly.js/factory.js":
/*!*************************************************!*\
  !*** ./node_modules/react-plotly.js/factory.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = plotComponentFactory;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\n// The naming convention is:\n//   - events are attached as `'plotly_' + eventName.toLowerCase()`\n//   - react props are `'on' + eventName`\nvar eventNames = [\n    \"AfterExport\",\n    \"AfterPlot\",\n    \"Animated\",\n    \"AnimatingFrame\",\n    \"AnimationInterrupted\",\n    \"AutoSize\",\n    \"BeforeExport\",\n    \"BeforeHover\",\n    \"ButtonClicked\",\n    \"Click\",\n    \"ClickAnnotation\",\n    \"Deselect\",\n    \"DoubleClick\",\n    \"Framework\",\n    \"Hover\",\n    \"LegendClick\",\n    \"LegendDoubleClick\",\n    \"Relayout\",\n    \"Relayouting\",\n    \"Restyle\",\n    \"Redraw\",\n    \"Selected\",\n    \"Selecting\",\n    \"SliderChange\",\n    \"SliderEnd\",\n    \"SliderStart\",\n    \"SunburstClick\",\n    \"Transitioning\",\n    \"TransitionInterrupted\",\n    \"Unhover\",\n    \"WebGlContextLost\"\n];\nvar updateEvents = [\n    \"plotly_restyle\",\n    \"plotly_redraw\",\n    \"plotly_relayout\",\n    \"plotly_relayouting\",\n    \"plotly_doubleclick\",\n    \"plotly_animated\",\n    \"plotly_sunburstclick\"\n]; // Check if a window is available since SSR (server-side rendering)\n// breaks unnecessarily if you try to use it server-side.\nvar isBrowser = \"undefined\" !== \"undefined\";\nfunction plotComponentFactory(Plotly) {\n    var PlotlyComponent = /*#__PURE__*/ function(_Component) {\n        _inherits(PlotlyComponent, _Component);\n        var _super = _createSuper(PlotlyComponent);\n        function PlotlyComponent(props) {\n            var _this;\n            _classCallCheck(this, PlotlyComponent);\n            _this = _super.call(this, props);\n            _this.p = Promise.resolve();\n            _this.resizeHandler = null;\n            _this.handlers = {};\n            _this.syncWindowResize = _this.syncWindowResize.bind(_assertThisInitialized(_this));\n            _this.syncEventHandlers = _this.syncEventHandlers.bind(_assertThisInitialized(_this));\n            _this.attachUpdateEvents = _this.attachUpdateEvents.bind(_assertThisInitialized(_this));\n            _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n            _this.handleUpdate = _this.handleUpdate.bind(_assertThisInitialized(_this));\n            _this.figureCallback = _this.figureCallback.bind(_assertThisInitialized(_this));\n            _this.updatePlotly = _this.updatePlotly.bind(_assertThisInitialized(_this));\n            return _this;\n        }\n        _createClass(PlotlyComponent, [\n            {\n                key: \"updatePlotly\",\n                value: function updatePlotly(shouldInvokeResizeHandler, figureCallbackFunction, shouldAttachUpdateEvents) {\n                    var _this2 = this;\n                    this.p = this.p.then(function() {\n                        if (_this2.unmounting) {\n                            return;\n                        }\n                        if (!_this2.el) {\n                            throw new Error(\"Missing element reference\");\n                        } // eslint-disable-next-line consistent-return\n                        return Plotly.react(_this2.el, {\n                            data: _this2.props.data,\n                            layout: _this2.props.layout,\n                            config: _this2.props.config,\n                            frames: _this2.props.frames\n                        });\n                    }).then(function() {\n                        if (_this2.unmounting) {\n                            return;\n                        }\n                        _this2.syncWindowResize(shouldInvokeResizeHandler);\n                        _this2.syncEventHandlers();\n                        _this2.figureCallback(figureCallbackFunction);\n                        if (shouldAttachUpdateEvents) {\n                            _this2.attachUpdateEvents();\n                        }\n                    })[\"catch\"](function(err) {\n                        if (_this2.props.onError) {\n                            _this2.props.onError(err);\n                        }\n                    });\n                }\n            },\n            {\n                key: \"componentDidMount\",\n                value: function componentDidMount() {\n                    this.unmounting = false;\n                    this.updatePlotly(true, this.props.onInitialized, true);\n                }\n            },\n            {\n                key: \"componentDidUpdate\",\n                value: function componentDidUpdate(prevProps) {\n                    this.unmounting = false; // frames *always* changes identity so fall back to check length only :(\n                    var numPrevFrames = prevProps.frames && prevProps.frames.length ? prevProps.frames.length : 0;\n                    var numNextFrames = this.props.frames && this.props.frames.length ? this.props.frames.length : 0;\n                    var figureChanged = !(prevProps.layout === this.props.layout && prevProps.data === this.props.data && prevProps.config === this.props.config && numNextFrames === numPrevFrames);\n                    var revisionDefined = prevProps.revision !== void 0;\n                    var revisionChanged = prevProps.revision !== this.props.revision;\n                    if (!figureChanged && (!revisionDefined || revisionDefined && !revisionChanged)) {\n                        return;\n                    }\n                    this.updatePlotly(false, this.props.onUpdate, false);\n                }\n            },\n            {\n                key: \"componentWillUnmount\",\n                value: function componentWillUnmount() {\n                    this.unmounting = true;\n                    this.figureCallback(this.props.onPurge);\n                    if (this.resizeHandler && isBrowser) {\n                        window.removeEventListener(\"resize\", this.resizeHandler);\n                        this.resizeHandler = null;\n                    }\n                    this.removeUpdateEvents();\n                    Plotly.purge(this.el);\n                }\n            },\n            {\n                key: \"attachUpdateEvents\",\n                value: function attachUpdateEvents() {\n                    var _this3 = this;\n                    if (!this.el || !this.el.removeListener) {\n                        return;\n                    }\n                    updateEvents.forEach(function(updateEvent) {\n                        _this3.el.on(updateEvent, _this3.handleUpdate);\n                    });\n                }\n            },\n            {\n                key: \"removeUpdateEvents\",\n                value: function removeUpdateEvents() {\n                    var _this4 = this;\n                    if (!this.el || !this.el.removeListener) {\n                        return;\n                    }\n                    updateEvents.forEach(function(updateEvent) {\n                        _this4.el.removeListener(updateEvent, _this4.handleUpdate);\n                    });\n                }\n            },\n            {\n                key: \"handleUpdate\",\n                value: function handleUpdate() {\n                    this.figureCallback(this.props.onUpdate);\n                }\n            },\n            {\n                key: \"figureCallback\",\n                value: function figureCallback(callback) {\n                    if (typeof callback === \"function\") {\n                        var _this$el = this.el, data = _this$el.data, layout = _this$el.layout;\n                        var frames = this.el._transitionData ? this.el._transitionData._frames : null;\n                        var figure = {\n                            data: data,\n                            layout: layout,\n                            frames: frames\n                        };\n                        callback(figure, this.el);\n                    }\n                }\n            },\n            {\n                key: \"syncWindowResize\",\n                value: function syncWindowResize(invoke) {\n                    var _this5 = this;\n                    if (!isBrowser) {\n                        return;\n                    }\n                    if (this.props.useResizeHandler && !this.resizeHandler) {\n                        this.resizeHandler = function() {\n                            return Plotly.Plots.resize(_this5.el);\n                        };\n                        window.addEventListener(\"resize\", this.resizeHandler);\n                        if (invoke) {\n                            this.resizeHandler();\n                        }\n                    } else if (!this.props.useResizeHandler && this.resizeHandler) {\n                        window.removeEventListener(\"resize\", this.resizeHandler);\n                        this.resizeHandler = null;\n                    }\n                }\n            },\n            {\n                key: \"getRef\",\n                value: function getRef(el) {\n                    this.el = el;\n                    if (this.props.debug && isBrowser) {\n                        window.gd = this.el;\n                    }\n                } // Attach and remove event handlers as they're added or removed from props:\n            },\n            {\n                key: \"syncEventHandlers\",\n                value: function syncEventHandlers() {\n                    var _this6 = this;\n                    eventNames.forEach(function(eventName) {\n                        var prop = _this6.props[\"on\" + eventName];\n                        var handler = _this6.handlers[eventName];\n                        var hasHandler = Boolean(handler);\n                        if (prop && !hasHandler) {\n                            _this6.addEventHandler(eventName, prop);\n                        } else if (!prop && hasHandler) {\n                            // Needs to be removed:\n                            _this6.removeEventHandler(eventName);\n                        } else if (prop && hasHandler && prop !== handler) {\n                            // replace the handler\n                            _this6.removeEventHandler(eventName);\n                            _this6.addEventHandler(eventName, prop);\n                        }\n                    });\n                }\n            },\n            {\n                key: \"addEventHandler\",\n                value: function addEventHandler(eventName, prop) {\n                    this.handlers[eventName] = prop;\n                    this.el.on(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n                }\n            },\n            {\n                key: \"removeEventHandler\",\n                value: function removeEventHandler(eventName) {\n                    this.el.removeListener(this.getPlotlyEventName(eventName), this.handlers[eventName]);\n                    delete this.handlers[eventName];\n                }\n            },\n            {\n                key: \"getPlotlyEventName\",\n                value: function getPlotlyEventName(eventName) {\n                    return \"plotly_\" + eventName.toLowerCase();\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                        id: this.props.divId,\n                        style: this.props.style,\n                        ref: this.getRef,\n                        className: this.props.className\n                    });\n                }\n            }\n        ]);\n        return PlotlyComponent;\n    }(_react.Component);\n    PlotlyComponent.propTypes = {\n        data: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object),\n        config: _propTypes[\"default\"].object,\n        layout: _propTypes[\"default\"].object,\n        frames: _propTypes[\"default\"].arrayOf(_propTypes[\"default\"].object),\n        revision: _propTypes[\"default\"].number,\n        onInitialized: _propTypes[\"default\"].func,\n        onPurge: _propTypes[\"default\"].func,\n        onError: _propTypes[\"default\"].func,\n        onUpdate: _propTypes[\"default\"].func,\n        debug: _propTypes[\"default\"].bool,\n        style: _propTypes[\"default\"].object,\n        className: _propTypes[\"default\"].string,\n        useResizeHandler: _propTypes[\"default\"].bool,\n        divId: _propTypes[\"default\"].string\n    };\n    eventNames.forEach(function(eventName) {\n        PlotlyComponent.propTypes[\"on\" + eventName] = _propTypes[\"default\"].func;\n    });\n    PlotlyComponent.defaultProps = {\n        debug: false,\n        useResizeHandler: false,\n        data: [],\n        style: {\n            position: \"relative\",\n            display: \"inline-block\"\n        }\n    };\n    return PlotlyComponent;\n} //# sourceMappingURL=factory.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-plotly.js/factory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-plotly.js/react-plotly.js":
/*!******************************************************!*\
  !*** ./node_modules/react-plotly.js/react-plotly.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _factory = _interopRequireDefault(__webpack_require__(/*! ./factory */ \"(ssr)/./node_modules/react-plotly.js/factory.js\"));\nvar _plotly = _interopRequireDefault(__webpack_require__(/*! plotly.js/dist/plotly */ \"(ssr)/./node_modules/plotly.js/dist/plotly.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nvar PlotComponent = (0, _factory[\"default\"])(_plotly[\"default\"]);\nvar _default = PlotComponent;\nexports[\"default\"] = _default; //# sourceMappingURL=react-plotly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxvdGx5LmpzL3JlYWN0LXBsb3RseS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxXQUFXQyx1QkFBdUJDLG1CQUFPQSxDQUFDLGtFQUFXO0FBRXpELElBQUlDLFVBQVVGLHVCQUF1QkMsbUJBQU9BLENBQUMsNEVBQXVCO0FBRXBFLFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFBRztBQUVoRyxJQUFJRSxnQkFBZ0IsQ0FBQyxHQUFHTixRQUFRLENBQUMsVUFBVSxFQUFFRyxPQUFPLENBQUMsVUFBVTtBQUMvRCxJQUFJSSxXQUFXRDtBQUNmUixrQkFBa0IsR0FBR1MsVUFDckIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxvdGx5LmpzL3JlYWN0LXBsb3RseS5qcz9lMTNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZmFjdG9yeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZmFjdG9yeVwiKSk7XG5cbnZhciBfcGxvdGx5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicGxvdGx5LmpzL2Rpc3QvcGxvdGx5XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbnZhciBQbG90Q29tcG9uZW50ID0gKDAsIF9mYWN0b3J5W1wiZGVmYXVsdFwiXSkoX3Bsb3RseVtcImRlZmF1bHRcIl0pO1xudmFyIF9kZWZhdWx0ID0gUGxvdENvbXBvbmVudDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1wbG90bHkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2ZhY3RvcnkiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wbG90bHkiLCJvYmoiLCJfX2VzTW9kdWxlIiwiUGxvdENvbXBvbmVudCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-plotly.js/react-plotly.js\n");

/***/ })

};
;